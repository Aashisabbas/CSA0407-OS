#include <stdio.h>

#define MAX_PROCESS 10

struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival Time
    int burst_time; // Burst Time
    int priority; // Priority
    int remaining_time; // Remaining Burst Time
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
};

int findHighestPriorityProcess(struct Process processes[], int n, int current_time) {
    int highest_priority_index = -1;
    int highest_priority = 9999; // Initialize with a high value

    for (int i = 0; i < n; i++) {
        if (processes[i].remaining_time > 0 && processes[i].priority < highest_priority && processes[i].arrival_time <= current_time) {
            highest_priority = processes[i].priority;
            highest_priority_index = i;
        }
    }

    return highest_priority_index;
}

void calculateWaitingTurnaroundTime(struct Process processes[], int n) {
    int current_time = 0;
    int remaining_processes = n;

    while (remaining_processes > 0) {
        int selected_process = findHighestPriorityProcess(processes, n, current_time);

        if (selected_process == -1) {
            current_time++;
            continue;
        }

        processes[selected_process].remaining_time--;

        if (processes[selected_process].remaining_time == 0) {
            remaining_processes--;

            int completion_time = current_time + 1;
            processes[selected_process].turnaround_time = completion_time - processes[selected_process].arrival_time;
            processes[selected_process].waiting_time = processes[selected_process].turnaround_time - processes[selected_process].burst_time;
        }

        current_time++;
    }
}

void calculateAverageTimes(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float average_waiting_time = total_waiting_time / n;
    float average_turnaround_time = total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

int main() {
    struct Process processes[MAX_PROCESS];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input details for each process
    printf("Enter details for each process (arrival time, burst time, priority):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Calculate waiting time and turnaround time
    calculateWaitingTurnaroundTime(processes, n);

    // Display results
    printf("\nProcess\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time);
    }

    // Calculate and display average waiting time and average turnaround time
    calculateAverageTimes(processes, n);

    return 0;
}
