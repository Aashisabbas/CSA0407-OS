#include <stdio.h>

#define MAX_PROCESS 10
#define TIME_QUANTUM 2 // Adjust the time quantum as needed

struct Process {
    int pid; // Process ID
    int burst_time; // Burst Time
    int remaining_time; // Remaining Burst Time
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
};

void simulateRoundRobin(struct Process processes[], int n) {
    int remaining_processes = n;
    int current_time = 0;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int execute_time = TIME_QUANTUM < processes[i].remaining_time ? TIME_QUANTUM : processes[i].remaining_time;

                processes[i].remaining_time -= execute_time;
                current_time += execute_time;

                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                    processes[i].turnaround_time = current_time;
                    processes[i].waiting_time = current_time - processes[i].burst_time;
                }
            }
        }
    }
}

void calculateAverageTimes(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float average_waiting_time = total_waiting_time / n;
    float average_turnaround_time = total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

int main() {
    struct Process processes[MAX_PROCESS];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input details for each process
    printf("Enter details for each process (burst time):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Simulate Round Robin scheduling
    simulateRoundRobin(processes, n);

    // Display results
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    // Calculate and display average waiting time and average turnaround time
    calculateAverageTimes(processes, n);

    return 0;
}
