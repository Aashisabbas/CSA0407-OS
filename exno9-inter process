#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

#define SHM_SIZE 1024  // Size of shared memory segment

int main() {
    int shmid;  // Shared memory ID
    char *shmaddr;  // Pointer to shared memory segment
    char message[] = "Hello, shared memory!";

    // Create a shared memory segment
    if ((shmid = shmget(IPC_PRIVATE, SHM_SIZE, IPC_CREAT | 0666)) < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the process's address space
    if ((shmaddr = shmat(shmid, NULL, 0)) == (char *) -1) {
        perror("shmat");
        exit(1);
    }

    // Write to shared memory
    strcpy(shmaddr, message);
    printf("Message written to shared memory: %s\n", shmaddr);

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        // Child process
        sleep(1); // Let parent process write to shared memory first
        printf("Child process reads from shared memory: %s\n", shmaddr);
        // Detach shared memory segment from this process
        if (shmdt(shmaddr) == -1) {
            perror("shmdt");
            exit(1);
        }
    } else {
        // Parent process
        wait(NULL); // Wait for child to finish
        // Detach shared memory segment from this process
        if (shmdt(shmaddr) == -1) {
            perror("shmdt");
            exit(1);
        }
        // Delete the shared memory segment
        if (shmctl(shmid, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(1);
        }
    }

    return 0;
}
